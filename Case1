#Import libraries
import pandas as pd
# List of raw CSV URLs from GitHub (all in correct format)
file_paths = [
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/Australia_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/Chile_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/France_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/Italy_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/New%20Zealand_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/Portugal_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/Spain_Wine_Stats.csv",
    "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/USA_Wine_Stats.csv"
]

# Load all CSVs into a list
dfs = [pd.read_csv(path) for path in file_paths]

# Concatenate into a single DataFrame
wine_df = pd.concat(dfs, ignore_index=True)

# Preview the DataFrame
wine_df.head()
# Check column names and types
wine_df.info()
# Check column names and types
wine_df.info()
# Check for missing values in each column
print("\nMissing values per column:")
print(wine_df.isnull().sum())

# Remove rows with any missing values
wine_df_cleaned = wine_df.dropna()

# Print the shape of the cleaned DataFrame
print(f"DataFrame shape after dropping missing values: {wine_df_cleaned.shape}")

# Check if there are any remaining missing values
print("\nMissing values per column after handling:")
print(wine_df_cleaned.isnull().sum())

import matplotlib.pyplot as plt
import seaborn as sns

# List of relevant numeric columns
numeric_cols = ['Rating', 'Number of Ratings', 'Price', 'Alcohol content']

# Plot boxplots to visually inspect outliers
plt.figure(figsize=(16, 8))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(x=wine_df[col])
    plt.title(f"Boxplot of {col}")
plt.tight_layout()
plt.show()

# Function to remove outliers using IQR method
def remove_outliers_iqr(df, col):
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    cleaned_df = df[(df[col] >= lower) & (df[col] <= upper)]
    print(f"{col}: Removed {df.shape[0] - cleaned_df.shape[0]} outliers")
    return cleaned_df

# Apply for selected numeric columns
for col in ['Price', 'Number of Ratings', 'Alcohol content']:
    wine_df = remove_outliers_iqr(wine_df, col)

# Final shape after outlier removal
print("\nFinal shape after removing outliers:", wine_df.shape)

import matplotlib.pyplot as plt
import seaborn as sns

# Plot boxplots to visually inspect the distributions after removing outliers
plt.figure(figsize=(16, 8))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(x=wine_df[col])
    plt.title(f"Boxplot of {col} (After Outlier Removal)")
plt.tight_layout()
plt.show()

# Extract 'Country' from the 'Region' column (assuming the format "Country / Region / Area")
wine_df['Country'] = wine_df['Region'].apply(lambda x: x.split(' / ')[0])

# Preview the DataFrame after adding the "Country" column
wine_df[['Region', 'Country']].head()

# Extract 'Country_region' from the 'Region' column
wine_df['Country_region'] = wine_df['Region'].apply(lambda x: ' / '.join(x.split(' / ')[1:]))

# Preview the DataFrame after adding the "Country_region" column
wine_df[['Region', 'Country_region']].head()

# Convert the "Food pairings" column to a list format (if it's a string)
wine_df['Food pairings'] = wine_df['Food pairings'].apply(lambda x: eval(x) if isinstance(x, str) else [])

# Check the conversion of "Food pairings" column
wine_df[['Food pairings']].head()

# List of possible food pairings
food_list = ['Beef', 'Lamb', 'Poultry', 'Pasta', 'Cheese', 'Pork', 'Fish', 'Vegetarian', 'Spicy', 
             'Salmon', 'Chicken', 'Steak', 'Barbecue', 'Mushroom', 'Tofu', 'Duck', 'Turkey', 
             'Veal', 'Pizza', 'Seafood', 'Dessert']

# Create a column for each food pairing
for food in food_list:
    wine_df[food] = wine_df['Food pairings'].apply(lambda x: food in x)

# Preview the DataFrame after adding the new columns
wine_df.head()



##Task03

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
from transformers import pipeline

# Use the raw file link from GitHub
url = "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/wine_review.csv"

# Load the CSV directly from GitHub
reviews_df = pd.read_csv(url)
reviews_df

# Preview the dataset
reviews_df.head()

# Load the zero-shot classifier
classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")
classifier

# Define the target categories
labels = [
    "talks about food combinations",
    "talks about taste",
    "talks about value for money",
    "other"
]



# Define a function to classify a review
def classify_review(review):
    result = classifier(review, candidate_labels=labels)
    return result['labels'][0]  # Select the top label

# Apply the function to classify each review
reviews_df['talks_about'] = reviews_df['review'].apply(classify_review)


# Plot the distribution of the classified categories
reviews_df['talks_about'].value_counts().plot(kind='bar', color='coral')

plt.title("Classification of Wine Reviews")
plt.xlabel("Category")
plt.ylabel("Number of Reviews")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()


##Task04

#Import libraries
import pandas as pd
import plotly.express as px


# Load the dataset directly from the GitHub raw URL
url = "https://raw.githubusercontent.com/Hasindu-Sahan/wine-data-analysis-2025/main/cleaned_wine_data.csv"
wine_df = pd.read_csv(url)

# Filter the dataset for France
filtered_df = wine_df[wine_df['Country'] == 'France']

# Create the histogram for Rating Distribution
fig1 = px.histogram(filtered_df, x='Rating', nbins=20, title='Rating Distribution')

# Show the plot
fig1.show()

fig2 = px.scatter(
    filtered_df,
    x='Price',
    y='Rating',
    color='Wine style',
    title='Price vs Rating'
)
fig2.show()


style_avg = (
    filtered_df.groupby('Wine style')['Rating']
    .mean()
    .nlargest(10)
    .reset_index()
)

fig3 = px.bar(
    style_avg,
    x='Wine style',
    y='Rating',
    title='Top 10 Wine Styles by Average Rating'
)
fig3.show()


grape_counts = (
    filtered_df['Grapes']
    .value_counts()
    .nlargest(10)
    .reset_index()
)
grape_counts.columns = ['Grape', 'Count']

fig4 = px.pie(
    grape_counts,
    names='Grape',
    values='Count',
    title='Most Popular Grape Types'
)
fig4.show()


fig5 = px.box(
    filtered_df,
    x='Wine style',
    y='Acidic',
    title='Wine Style by Acidity',
    height=600
)
fig5.update_layout(xaxis_tickangle=-45)
fig5.show()


!pip install dash jupyter-dash

!pip install dash==2.11.1 jupyter-dash==0.4.2

!pip install dash==2.9.0

import dash
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px

# Load cleaned dataset
wine_df = pd.read_csv('cleaned_wine_data.csv')

# Initialize the Dash app
app = dash.Dash(__name__)
app.title = "Wine Data Dashboard"

# Layout of the dashboard
app.layout = html.Div([
    html.H1("Wine Analytics Dashboard", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Select Country:"),
        dcc.Dropdown(
            id='country-dropdown',
            options=[{'label': c, 'value': c} for c in wine_df['Country'].unique()],
            value='France',
            clearable=False
        )
    ], style={'width': '30%', 'padding': '10px'}),

    dcc.Graph(id='rating-distribution'),
    dcc.Graph(id='price-vs-rating'),
    dcc.Graph(id='top-wine-styles'),
    dcc.Graph(id='grape-popularity'),
    dcc.Graph(id='wine-style-by-acidity')
])

# Callback to update graphs
@app.callback(
    [
        Output('rating-distribution', 'figure'),
        Output('price-vs-rating', 'figure'),
        Output('top-wine-styles', 'figure'),
        Output('grape-popularity', 'figure'),
        Output('wine-style-by-acidity', 'figure')
    ],
    Input('country-dropdown', 'value')
)
def update_charts(selected_country):
    filtered_df = wine_df[wine_df['Country'] == selected_country]

    fig1 = px.histogram(filtered_df, x='Rating', nbins=20, title='Rating Distribution')

    fig2 = px.scatter(filtered_df, x='Price', y='Rating', color='Wine style', title='Price vs Rating')

    style_avg = filtered_df.groupby('Wine style')['Rating'].mean().nlargest(10).reset_index()
    fig3 = px.bar(style_avg, x='Wine style', y='Rating', title='Top 10 Wine Styles by Average Rating')

    grape_counts = filtered_df['Grapes'].value_counts().nlargest(10).reset_index()
    grape_counts.columns = ['Grape', 'Count']
    fig4 = px.pie(grape_counts, names='Grape', values='Count', title='Most Popular Grape Types')

    fig5 = px.box(filtered_df, x='Wine style', y='Acidic', title='Wine Style by Acidity', height=600)
    fig5.update_layout(xaxis_tickangle=-45)

    return fig1, fig2, fig3, fig4, fig5

# Run the app externally
app.run_server(debug=True, use_reloader=False)
